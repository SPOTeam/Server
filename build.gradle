
plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id "io.sentry.jvm.gradle" version "4.10.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// h2
	implementation 'com.h2database:h2'
	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
	// apache common csv
	implementation 'org.apache.commons:commons-csv:1.8'

    // Oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // email
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // ModelMapper
    implementation 'org.modelmapper:modelmapper:2.4.4'

    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // P6spy
    implementation 'p6spy:p6spy:3.9.1'
    implementation 'com.github.gavlyukovskiy:datasource-decorator-spring-boot-autoconfigure:1.9.0'
}

sentry {
    includeSourceContext = true

    org = "spot-3s"
    projectName = "java-spring-boot"
    authToken = System.getenv("SENTRY_AUTH_TOKEN")
}

jacocoTestReport {
    reports {
        html.required.set(true) // HTML 리포트를 활성화
        xml.required.set(false) // XML 리포트를 비활성화
        csv.required.set(false) // CSV 리포트를 비활성화

        // 리포트 저장 경로 설정
        html.outputLocation.set(file("jacoco"))
        //xml.outputLocation.set(file("jacoco/jacoco.xml"))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS' // class 단위로 룰을 체크합니다.

            // 브랜치 커버리지 최소값 설정
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}



tasks.named('test') {
    useJUnitPlatform()
}

def querydslSrcDir = 'src/main/generated'
clean {
    delete file(querydslSrcDir)
}
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}
